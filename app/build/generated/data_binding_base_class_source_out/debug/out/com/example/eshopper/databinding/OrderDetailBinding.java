// Generated by view binder compiler. Do not edit!
package com.example.eshopper.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.RelativeLayout;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.cardview.widget.CardView;
import androidx.recyclerview.widget.RecyclerView;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.example.eshopper.R;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class OrderDetailBinding implements ViewBinding {
  @NonNull
  private final RelativeLayout rootView;

  @NonNull
  public final TextView DateOrder;

  @NonNull
  public final TextView address;

  @NonNull
  public final CardView info;

  @NonNull
  public final TextView name;

  @NonNull
  public final TextView number;

  @NonNull
  public final CardView order;

  @NonNull
  public final RecyclerView rvDetail;

  @NonNull
  public final TextView textAddress;

  @NonNull
  public final TextView timeOrder;

  @NonNull
  public final TextView uid;

  @NonNull
  public final TextView valueDateOrder;

  @NonNull
  public final TextView valueTimeOrder;

  @NonNull
  public final TextView valueUid;

  private OrderDetailBinding(@NonNull RelativeLayout rootView, @NonNull TextView DateOrder,
      @NonNull TextView address, @NonNull CardView info, @NonNull TextView name,
      @NonNull TextView number, @NonNull CardView order, @NonNull RecyclerView rvDetail,
      @NonNull TextView textAddress, @NonNull TextView timeOrder, @NonNull TextView uid,
      @NonNull TextView valueDateOrder, @NonNull TextView valueTimeOrder,
      @NonNull TextView valueUid) {
    this.rootView = rootView;
    this.DateOrder = DateOrder;
    this.address = address;
    this.info = info;
    this.name = name;
    this.number = number;
    this.order = order;
    this.rvDetail = rvDetail;
    this.textAddress = textAddress;
    this.timeOrder = timeOrder;
    this.uid = uid;
    this.valueDateOrder = valueDateOrder;
    this.valueTimeOrder = valueTimeOrder;
    this.valueUid = valueUid;
  }

  @Override
  @NonNull
  public RelativeLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static OrderDetailBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static OrderDetailBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.order_detail, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static OrderDetailBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.DateOrder;
      TextView DateOrder = ViewBindings.findChildViewById(rootView, id);
      if (DateOrder == null) {
        break missingId;
      }

      id = R.id.address;
      TextView address = ViewBindings.findChildViewById(rootView, id);
      if (address == null) {
        break missingId;
      }

      id = R.id.info;
      CardView info = ViewBindings.findChildViewById(rootView, id);
      if (info == null) {
        break missingId;
      }

      id = R.id.name;
      TextView name = ViewBindings.findChildViewById(rootView, id);
      if (name == null) {
        break missingId;
      }

      id = R.id.number;
      TextView number = ViewBindings.findChildViewById(rootView, id);
      if (number == null) {
        break missingId;
      }

      id = R.id.order;
      CardView order = ViewBindings.findChildViewById(rootView, id);
      if (order == null) {
        break missingId;
      }

      id = R.id.rvDetail;
      RecyclerView rvDetail = ViewBindings.findChildViewById(rootView, id);
      if (rvDetail == null) {
        break missingId;
      }

      id = R.id.textAddress;
      TextView textAddress = ViewBindings.findChildViewById(rootView, id);
      if (textAddress == null) {
        break missingId;
      }

      id = R.id.timeOrder;
      TextView timeOrder = ViewBindings.findChildViewById(rootView, id);
      if (timeOrder == null) {
        break missingId;
      }

      id = R.id.uid;
      TextView uid = ViewBindings.findChildViewById(rootView, id);
      if (uid == null) {
        break missingId;
      }

      id = R.id.valueDateOrder;
      TextView valueDateOrder = ViewBindings.findChildViewById(rootView, id);
      if (valueDateOrder == null) {
        break missingId;
      }

      id = R.id.valueTimeOrder;
      TextView valueTimeOrder = ViewBindings.findChildViewById(rootView, id);
      if (valueTimeOrder == null) {
        break missingId;
      }

      id = R.id.valueUid;
      TextView valueUid = ViewBindings.findChildViewById(rootView, id);
      if (valueUid == null) {
        break missingId;
      }

      return new OrderDetailBinding((RelativeLayout) rootView, DateOrder, address, info, name,
          number, order, rvDetail, textAddress, timeOrder, uid, valueDateOrder, valueTimeOrder,
          valueUid);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
